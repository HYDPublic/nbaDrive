<?php

namespace PlayoffBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;


/**
 * StatsheetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StatsheetRepository extends \Doctrine\ORM\EntityRepository
{


	public function classementOfUSers($users)
	{

		foreach($users as $u)
			$us[] = $u->getId();

		$usz = implode(',', $us);
	/*
		// MARCHE PARFAITEMENT !

		SELECT p.user_id, SUM(s.points)
		FROM pl_statsheet s, pf_pick p
		WHERE p.player_id = s.player_id AND p.date = s.day
		GROUP BY p.user_id
		HAVING p.user_id IN (8,10,12)

	*/

		$dql = "
			SELECT IDENTITY(p.user), SUM(s.points)
			FROM PlayoffBundle\Entity\Statsheet s,
			FantasyBundle\Entity\Pick p
			WHERE p.player = s.player AND p.date = s.day
			GROUP BY p.user
			HAVING p.user IN ($usz)
			";
		$em = $this->getEntityManager();
		$query = $em->createQuery($dql);

		foreach($query->getResult() as $row) 
			$tb[$row[1]] = $row[2];


		arsort($tb);
		return $tb;

	}


	public function getClassementGlobal($user)
	{

	/*
		// MARCHE PARFAITEMENT !

		SELECT p.user_id, SUM(s.points)
		FROM pl_statsheet s, pf_pick p
		WHERE p.player_id = s.player_id AND p.date = s.day
		GROUP BY p.user_id

	*/

		$dql = "
				SELECT IDENTITY(p.user), SUM(s.points)
				FROM PlayoffBundle\Entity\Statsheet s,
				FantasyBundle\Entity\Pick p
				WHERE p.player = s.player AND p.date = s.day
				GROUP BY p.user
				";
		$em = $this->getEntityManager();
		$query = $em->createQuery($dql);
		$tb = array();

		foreach($query->getResult() as $row) {
			$tb[] = $row[2];
			$me[$row[1]] = $row[2];
		}

		// On tri le tableau par valeur dÃ©croissante
		rsort($tb);
		if( isset($me[$user->getId()]))
			$pos = array_search($me[$user->getId()], $tb);
		else
			return '-';
		return ($pos+1);
	}


	public function zeBest()
	{
		$dql = "
				SELECT s.id, s.points, s.stats, s.day 
				FROM PlayoffBundle\Entity\Statsheet s 
				INNER JOIN ( SELECT day, MAX(points) AS points FROM PlayoffBundle\Entity\Statsheet GROUP BY day) ps 
				ON s.day = ps.day AND s.points = ps.points
				";

		$em = $this->getEntityManager();
		$query = $em->createQuery($dql);
		$res = $query->getResult();
		dump($res);
	}

	public function getUserPicksPoints($picks)
	{

		$toreturn = array();
		foreach($picks as $pick){

			$query = $this->createQueryBuilder('s')
				->where('s.player = :player')
				->setParameter('player', $pick->getPlayer())
				->join('s.game', 'g', 'WITH', 'g.day = :date')
				->setParameter('date', $pick->getDate())
				->getQuery()
				->getOneOrNullResult()
			;
			if($query)
				$toreturn[$query->getPlayer()->getId()] = $query;
		}

		return $toreturn;
	}

	public function getBestPicks()
	{

		// get all games by dates
		$games = $this->getEntityManager()->createQuery('SELECT g FROM PlayoffBundle:Game g')->getResult();
		foreach($games as $game){
			$d = $game->getDate();
			$g[$d->format('d-m-Y')][] = $game;
		}

		$best = array();
		foreach($g as $day=>$gd){
			$query = $this->createQueryBuilder('s')
				
				->where('s.game IN (:games)')
				->setParameter('games', $gd)
				->orderBy('s.points', 'DESC')
				->setMaxResults(1)
				->getQuery()
				->getOneOrNullResult()
			;
			if($query)
				$best[$day] = $query;
		}

		return $best;
	}

	public function getBestPickId()
	{
		
		$sql = 'SELECT s.id, s.points, s.stats, s.day FROM pl_statsheet s INNER JOIN ( SELECT day, MAX(points) AS points FROM pl_statsheet GROUP BY day) ps ON s.day = ps.day AND s.points = ps.points';

		$rsm = new ResultSetMapping;
		$rsm->addEntityResult('PlayoffBundle:Statsheet', 's');
		$rsm->addFieldResult('s', 'id', 'id');
		$rsm->addFieldResult('s', 'points', 'points');
		$rsm->addFieldResult('s', 'stats', 'stats');
		$rsm->addFieldResult('s', 'day', 'day');
		$rsm->addMetaResult('s', 'player_id', 'player', true);
		$rsm->addMetaResult('s', 'game_id', 'game', true);
		$query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
		$picks = $query->getResult();

		// dump($picks);

		foreach($picks as $pick){
			$ids[] = $pick->getId();
		}
		return $ids;

	}

}
