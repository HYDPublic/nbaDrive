<?php

namespace PlayoffBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;


/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends \Doctrine\ORM\EntityRepository
{
	
	public function getByDatesBeforeToday()
	{
		$query = $this->createQueryBuilder('g')
			->select('MIN(g.date) as firstDate, g.day')
			->groupBy('g.day')
			->getQuery()
			->getResult()
		;

		$query = array_reverse($query);
		return $query;
	}

	public function getByDates($page, $nbPerPage)
	{
		$query = $this->createQueryBuilder('g')
			->select('MIN(g.date) as firstDate, g.day')
			->groupBy('g.day')
			->getQuery()
			->getResult()
		;

		$query = array_reverse($query);

		$deb = ($page-1) * $nbPerPage;
		$fin = $deb + $nbPerPage;
		$nbPages = ceil(count($query)/$nbPerPage);

		for($i=$deb ; $i<$fin ; $i++){
			if( !isset($query[$i]) )
				break;
			$res[] = $query[$i];

		}

		return $query = array('nbpages'=>$nbPages, 'results'=>$res);
	}


	public function isPlayerInGame($day,$player)
	{
		$query = $this->createQueryBuilder('g')
			->select('COUNT(g.id)') 
			->where('g.day = :date')
			->setParameter('date', $day->format('Y-m-d'))
			->andWhere('g.teamExt = :team OR g.teamDom = :team')
			->setParameter('team', $player->getTeam()->getId() )
			->getQuery()
			->getSingleScalarResult()
		;
		
		if($query)
			return true;
		return false;

	}


	// Liste des matchs joué qui n'ont pas encore été parsé
	// donc pas de vainqueur encode décidé !
	public function getGamesPlayedButNoWinnerYet()
	{
		$qb  = $this->createQueryBuilder('g');

		$query = $qb->where('g.date < :now')
			->setParameter('now', new \DateTime('now') )
			->andWhere( $qb->expr()->isNull('g.winner') )
			->getQuery()
			->getResult()
		;

		return $query;
	}


	// Liste des matchs manquant a dans un Round
	public function getGamesMissingByRounds()
	{

		// get all games
		$games = $this->getEntityManager()->getRepository('PlayoffBundle:Game')->findAll();

		$matchsUp = array();

		foreach($games as $game){

			if( $game->getTeamExt()->getId() > $game->getTeamDom()->getId() )
				$zids = $game->getTeamExt()->getId().'-'.$game->getTeamDom()->getId();
			else
				$zids = $game->getTeamDom()->getId().'-'.$game->getTeamExt()->getId();

			if( !isset($matchsUp[$game->getRound()][$zids]) ){
				$matchsUp[$game->getRound()][$zids]['count'] = 0;
				$matchsUp[$game->getRound()][$zids][$game->getTeamDom()->getId()] = 0;
				$matchsUp[$game->getRound()][$zids][$game->getTeamExt()->getId()] = 0;
				$matchsUp[$game->getRound()][$zids]['teams'][] = $game->getTeamDom();
				$matchsUp[$game->getRound()][$zids]['teams'][] = $game->getTeamExt();
			}

			$matchsUp[$game->getRound()][$zids]['count']++;
			if($game->getWinner())
				$matchsUp[$game->getRound()][$zids][$game->getWinner()->getId()]++;

			$tmp_a = $matchsUp[$game->getRound()][$zids][$game->getTeamDom()->getId()];
			$tmp_b = $matchsUp[$game->getRound()][$zids][$game->getTeamExt()->getId()];

			$min = ($tmp_a < $tmp_b) ? $tmp_a : $tmp_b;
			$neededGames = 4 + $min;
			$matchsUp[$game->getRound()][$zids]['needed'] = $neededGames - $matchsUp[$game->getRound()][$zids]['count'];
		}


		
		return $matchsUp;

	}


}
